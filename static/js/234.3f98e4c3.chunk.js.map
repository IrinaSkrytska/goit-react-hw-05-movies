{"version":3,"file":"static/js/234.3f98e4c3.chunk.js","mappings":"4TAEMA,EAAM,mCACNC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEmBC,IAAAA,IAAA,UACjBF,EADiB,uCACsBD,IAHzC,cAEGI,EAFH,OAMGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACLC,GAAID,EAAEC,GACNC,UAAWF,EAAEG,eAEhB,IAXE,kBAYIP,GAZJ,gCAcHQ,QAAQC,IAAR,MAdG,gFAkBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kGAEmBb,IAAAA,IAAA,UACjBF,EADiB,iCACgBD,EADhB,iCAC4CgB,EAD5C,+BAFnB,cAEGZ,EAFH,OAKGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACLC,GAAID,EAAEC,GACNC,UAAWF,EAAEG,eAEhB,IAVE,kBAWIP,GAXJ,gCAaHQ,QAAQC,IAAR,MAbG,gFAiBA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,oBACmBlB,EADnB,oBAFnB,cAEGI,EAFH,OAKGC,EAAkB,CAACD,EAAQE,MAAME,KAAI,SAAAC,GACzC,MAAO,CACLU,OAAO,mCAAD,OAAqCV,EAAEW,aAC7CC,IAAKZ,EAAEa,QACPX,UAAWF,EAAEG,eACbW,UAAWd,EAAEe,aACbC,SAAUhB,EAAEgB,SACZC,OAAQjB,EAAEiB,OAAOlB,KAAI,SAAAmB,GAAK,OAAIA,EAAMC,IAAV,IAE7B,IAdE,kBAeIvB,GAfJ,gCAiBHQ,QAAQC,IAAR,MAjBG,gFAqBA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA4BX,GAA5B,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,4BAC2BlB,EAD3B,oBAFnB,cAEGI,EAFH,OAKGC,EAAkBD,EAAQE,KAAKwB,KAAKtB,KAAI,SAAAC,GAC5C,MAAO,CACLsB,OAAQtB,EAAEuB,QACVJ,KAAMnB,EAAEwB,cACRC,UAAWzB,EAAEyB,UACbC,gBAAgB,mCAAD,OAAqC1B,EAAE2B,cAEzD,IAZE,kBAaI/B,GAbJ,gCAeHQ,QAAQC,IAAR,MAfG,gFAmBA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCnB,GAAhC,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,4BAC2BlB,EAD3B,oBAFnB,cAEGI,EAFH,OAKGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACL6B,SAAU7B,EAAEC,GACZ6B,OAAQ9B,EAAE8B,OACVC,OAAQ/B,EAAEgC,QAEb,IAXE,kBAYIpC,GAZJ,gCAcHQ,QAAQC,IAAR,MAdG,gF,iIC9EQ,SAAS4B,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,wBAAKA,GACb,CCCc,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,KAA+BC,KAAKL,EACrC,GAAE,KAGD,iCACE,mBACA,SAACL,EAAD,CAAaC,KAAM,oBAClBG,IACC,+BACE,wBACGA,EAAOtC,KAAI,SAAA6C,GAAK,OACf,yBACE,SAAC,KAAD,CACEC,GAAI,CAAEC,SAAS,WAAD,OAAaF,EAAM3C,KACjC8C,MAAO,CAAEC,KAAMT,EAASO,UAF1B,SAIGF,EAAM1C,aALF0C,EAAM3C,GADA,UAe5B,C","sources":["services/movies-api.js","components/PageHeading/PageHeading.jsx","views/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'e1127228e5b086ad27f085a5b4b021d7';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getPopularMovies() {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        id: e.id,\n        movieName: e.original_title,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}search/movie/?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=true`\n    );\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        id: e.id,\n        movieName: e.original_title,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = [request.data].map(e => {\n      return {\n        poster: `https://themoviedb.org/t/p/w500/${e.poster_path}`,\n        tag: e.tagline,\n        movieName: e.original_title,\n        userScore: e.vote_average,\n        overview: e.overview,\n        genres: e.genres.map(genre => genre.name),\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = request.data.cast.map(e => {\n      return {\n        castId: e.cast_id,\n        name: e.original_name,\n        character: e.character,\n        castMemberPhoto: `https://themoviedb.org/t/p/w500/${e.profile_path}`,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesReviews(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        reviewId: e.id,\n        author: e.author,\n        review: e.content,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import PropTypes from 'prop-types';\n\nexport default function PageHeading({ text }) {\n  return <h1>{text}</h1>;\n}\n\nPageHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport * as homePageAPI from 'services/movies-api';\nimport PageHeading from 'components/PageHeading';\n\nexport default function Home() {\n  const [movies, setMovies] = useState();\n  const location = useLocation();\n\n  useEffect(() => {\n    homePageAPI.getPopularMovies().then(setMovies);\n  }, []);\n\n  return (\n    <>\n      <hr />\n      <PageHeading text={'Trending Movies'} />\n      {movies && (\n        <>\n          <ul>\n            {movies.map(movie => (\n              <li key={movie.id}>\n                <Link\n                  to={{ pathname: `/movies/${movie.id}` }}\n                  state={{ from: location.pathname }}\n                >\n                  {movie.movieName}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["KEY","BASE_URL","getPopularMovies","axios","request","detailedRequest","data","results","map","e","id","movieName","original_title","console","log","searchMovies","query","getMovieDetails","movieId","poster","poster_path","tag","tagline","userScore","vote_average","overview","genres","genre","name","getMovieCast","cast","castId","cast_id","original_name","character","castMemberPhoto","profile_path","getMoviesReviews","reviewId","author","review","content","PageHeading","text","Home","useState","movies","setMovies","location","useLocation","useEffect","homePageAPI","then","movie","to","pathname","state","from"],"sourceRoot":""}
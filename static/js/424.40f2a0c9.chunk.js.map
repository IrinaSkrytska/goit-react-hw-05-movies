{"version":3,"file":"static/js/424.40f2a0c9.chunk.js","mappings":"gUAEMA,EAAM,mCACNC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEmBC,IAAAA,IAAA,UACjBF,EADiB,uCACsBD,IAHzC,cAEGI,EAFH,OAMGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACLC,GAAID,EAAEC,GACNC,UAAWF,EAAEG,eAEhB,IAXE,kBAYIP,GAZJ,gCAcHQ,QAAQC,IAAR,MAdG,gFAkBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kGAEmBb,IAAAA,IAAA,UACjBF,EADiB,gCACeD,EADf,iCAC2CgB,EAD3C,+BAFnB,cAEGZ,EAFH,OAKGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACLC,GAAID,EAAEC,GACNC,UAAWF,EAAEG,eAEhB,IAVE,kBAWIP,GAXJ,gCAaHQ,QAAQC,IAAR,MAbG,gFAiBA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,oBACmBlB,EADnB,oBAFnB,cAEGI,EAFH,OAKGC,EAAkB,CAACD,EAAQE,MAAME,KAAI,SAAAC,GACzC,MAAO,CACLU,OAAO,mCAAD,OAAqCV,EAAEW,aAC7CC,IAAKZ,EAAEa,QACPX,UAAWF,EAAEG,eACbW,UAAWd,EAAEe,aACbC,SAAUhB,EAAEgB,SACZC,OAAQjB,EAAEiB,OAAOlB,KAAI,SAAAmB,GAAK,OAAIA,EAAMC,IAAV,IAE7B,IAdE,kBAeIvB,GAfJ,gCAiBHQ,QAAQC,IAAR,MAjBG,gFAqBA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA4BX,GAA5B,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,4BAC2BlB,EAD3B,oBAFnB,cAEGI,EAFH,OAKGC,EAAkBD,EAAQE,KAAKwB,KAAKtB,KAAI,SAAAC,GAC5C,MAAO,CACLsB,OAAQtB,EAAEuB,QACVJ,KAAMnB,EAAEwB,cACRC,UAAWzB,EAAEyB,UACbC,gBAAgB,mCAAD,OAAqC1B,EAAE2B,cAEzD,IAZE,kBAaI/B,GAbJ,gCAeHQ,QAAQC,IAAR,MAfG,gFAmBA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCnB,GAAhC,kGAEmBf,IAAAA,IAAA,UACjBF,EADiB,iBACAiB,EADA,4BAC2BlB,EAD3B,oBAFnB,cAEGI,EAFH,OAKGC,EAAkBD,EAAQE,KAAKC,QAAQC,KAAI,SAAAC,GAC/C,MAAO,CACL6B,SAAU7B,EAAEC,GACZ6B,OAAQ9B,EAAE8B,OACVC,OAAQ/B,EAAEgC,QAEb,IAXE,kBAYIpC,GAZJ,gCAcHQ,QAAQC,IAAR,MAdG,gF,qGC/EP,GAAgB,MAAQ,qB,SCIT,SAAS4B,EAAT,GAA4B,IAAZxB,EAAW,EAAXA,QAC7B,GAAwByB,EAAAA,EAAAA,UAAS,MAAjC,eAAOb,EAAP,KAAac,EAAb,KAKA,OAHAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAwB5B,GAAS6B,KAAKH,EACvC,GAAE,CAAC1B,KAEF,iBAAK8B,UAAWC,EAAAA,WAAhB,WACE,mBACEnB,IACiB,IAAhBA,EAAKoB,QACJ,+DAEApB,EAAKtB,KAAI,SAAAC,GACP,OACE,2BACGA,EAAE0B,gBAAgBgB,SAAS,cAC1B,oBAEA,gBACEC,IAAK3C,EAAE0B,gBACPkB,IAAK5C,EAAEmB,KACPoB,UAAWC,EAAAA,SAGf,wBAAKxC,EAAEmB,QACP,uBAAInB,EAAEyB,cAXEzB,EAAEsB,OAcf,OAIV,C","sources":["services/movies-api.js","webpack://react-homework-template/./src/views/Cast/Cast.module.css?f355","views/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'e1127228e5b086ad27f085a5b4b021d7';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getPopularMovies() {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        id: e.id,\n        movieName: e.original_title,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=true`\n    );\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        id: e.id,\n        movieName: e.original_title,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = [request.data].map(e => {\n      return {\n        poster: `https://image.tmdb.org/t/p/w500/${e.poster_path}`,\n        tag: e.tagline,\n        movieName: e.original_title,\n        userScore: e.vote_average,\n        overview: e.overview,\n        genres: e.genres.map(genre => genre.name),\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = request.data.cast.map(e => {\n      return {\n        castId: e.cast_id,\n        name: e.original_name,\n        character: e.character,\n        castMemberPhoto: `https://themoviedb.org/t/p/w500/${e.profile_path}`,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesReviews(movieId) {\n  try {\n    const request = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n    const detailedRequest = request.data.results.map(e => {\n      return {\n        reviewId: e.id,\n        author: e.author,\n        review: e.content,\n      };\n    });\n    return detailedRequest;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"image\":\"Cast_image__Wb81U\"};","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport * as getCastAPI from 'services/movies-api';\nimport css from './Cast.module.css';\n\nexport default function Cast({ movieId }) {\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    getCastAPI.getMovieCast(movieId).then(setCast);\n  }, [movieId]);\n  return (\n    <div className={css.cast_thumb}>\n      <hr />\n      {!cast ||\n        (cast.length === 0 ? (\n          <p>We don't have a cast for this movie</p>\n        ) : (\n          cast.map(e => {\n            return (\n              <div key={e.castId}>\n                {e.castMemberPhoto.includes('w500/null') ? (\n                  <div></div>\n                ) : (\n                  <img\n                    src={e.castMemberPhoto}\n                    alt={e.name}\n                    className={css.image}\n                  />\n                )}\n                <h5>{e.name}</h5>\n                <p>{e.character}</p>\n              </div>\n            );\n          })\n        ))}\n    </div>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"names":["KEY","BASE_URL","getPopularMovies","axios","request","detailedRequest","data","results","map","e","id","movieName","original_title","console","log","searchMovies","query","getMovieDetails","movieId","poster","poster_path","tag","tagline","userScore","vote_average","overview","genres","genre","name","getMovieCast","cast","castId","cast_id","original_name","character","castMemberPhoto","profile_path","getMoviesReviews","reviewId","author","review","content","Cast","useState","setCast","useEffect","getCastAPI","then","className","css","length","includes","src","alt"],"sourceRoot":""}